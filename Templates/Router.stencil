import Foundation
import Swiftkiq

class Router: Routable {
    func dispatch(_ work: UnitOfWork, errorCallback: WorkerFailureCallback) throws {
        switch work.workerType {
        {% for type in types.based.Worker %}
        case String(describing: {{ type.name }}.self):
            try invokeWorker(workerType: {{ type.name }}.self, work: work, errorCallback: errorCallback)
        {% endfor %}
        default:
            throw RouterError.notFoundWorker
        }
    }
}

{% for type in types.based.Worker %}
extension {{ type.name }}.Args {
    public func toArray() -> [Any] {
        return [
            {% for argType in type.containedTypes %}
            {% if argType.name|contains:"Args" %}
            {% for prop in argType.storedVariables %}
            {{ prop.name }},
            {% endfor %}
            {% endif %}
            {% endfor %}
        ]
    }

    static func from(_ array: [Any]) -> {{ type.name }}.Args {
        return {{ type.name }}.Args(
            {% for argType in type.containedTypes %}
            {% if argType.name|contains:"Args" %}
            {% for prop in argType.storedVariables %}
            {{ prop.name }}: array[{{ forloop.counter }} - 1] as! {{ prop.typeName }}{% if not forloop.last %},{% endif %}
            {% endfor %}
            {% endif %}
            {% endfor %}
        )
    }
}
{% endfor %}
