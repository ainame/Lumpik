import Foundation
import Swiftkiq

class Router: Routable {
    func dispatch(_ work: UnitOfWork) throws {
        switch work.workerClass {
        {% for type in types.based.WorkerType %}
        case "{{ type.name }}":
            try invokeWorker(workerClass: {{ type.name }}.self, work: work)
        {% endfor %}
        default:
            break
        }
    }

    func invokeWorker<W: Worker>(workerClass: W.Type, work: UnitOfWork) throws {
        let worker = workerClass.init()
        let args = workerClass.Args.from(work.args)
        worker.jid = work.jid
        worker.retry = work.retry
        worker.queue = work.queue
        print("[INFO]: \(work.workerClass) start")
        let start = Date()
        try worker.perform(args)
        let interval = Date().timeIntervalSince(start)
        print(String(format: "[INFO]: jid=%@ %@ done - %.4f msec", work.jid, work.workerClass, interval))
    }
}
